#
## Test the Archive Policy API to achieve coverage of just the
## ArchivePolicyRulesController.
##
#
fixtures:
    - ConfigFixture

tests:

# create dependent policy
    - name: create archive policy
      url: /v1/archive_policy
      method: POST
      request_headers:
          content-type: application/json
          x-roles: admin
      data:
          name: low
          definition:
              - granularity: 1 hour
      response_headers:
          location: $SCHEME://$NETLOC/v1/archive_policy/low
      status: 201

# Attempt to create an archive policy rule

    - name: create archive policy rule1
      url: /v1/archive_policy_rule
      method: POST
      request_headers:
          content-type: application/json
          x-roles: admin
      data:
        name: test_rule1
        metric_pattern: "*"
        archive_policy_name: low
      status: 201
      response_json_paths:
        $.metric_pattern: "*"
        $.archive_policy_name: low
        $.name: test_rule1

    - name: create archive policy rule 2
      url: /v1/archive_policy_rule
      method: POST
      request_headers:
          content-type: application/json
          x-roles: admin
      data:
        name: test_rule2
        metric_pattern: "disk.foo.*"
        archive_policy_name: low
      status: 201
      response_json_paths:
        $.metric_pattern: disk.foo.*
        $.archive_policy_name: low
        $.name: test_rule2

    - name: create archive policy rule 3
      url: /v1/archive_policy_rule
      method: POST
      request_headers:
          content-type: application/json
          x-roles: admin
      data:
        name: test_rule3
        metric_pattern: "disk.*"
        archive_policy_name: low
      status: 201
      response_json_paths:
        $.metric_pattern: disk.*
        $.archive_policy_name: low
        $.name: test_rule3


# Attempt to create an invalid policy rule

    - name: create invalid archive policy rule
      url: /v1/archive_policy_rule
      method: POST
      request_headers:
          content-type: application/json
          x-roles: admin
      data:
        name: test_rule
        metric_pattern: "disk.foo.*"
      status: 400

    - name: missing auth archive policy rule
      url: /v1/archive_policy_rule
      method: POST
      request_headers:
          content-type: application/json
      data:
        name: test_rule
        metric_pattern: "disk.foo.*"
        archive_policy_name: low
      status: 403

    - name: wrong content type
      url: /v1/archive_policy_rule
      method: POST
      request_headers:
          content-type: text/plain
          x-roles: admin
      status: 415
      response_strings:
          - Unsupported Media Type

    - name: wrong auth create rule
      url: /v1/archive_policy_rule
      method: POST
      request_headers:
          content-type: application/json
          x-roles: foo
      data:
          name: test_rule_wrong_auth
          metric_pattern: "disk.foo.*"
          archive_policy_name: low
      status: 403

    - name: missing auth createrule
      url: /v1/archive_policy_rule
      method: POST
      request_headers:
          content-type: application/json
      data:
          name: test_rule_miss_auth
          metric_pattern: "disk.foo.*"
          archive_policy_name: low
      status: 403

    - name: bad request body
      url: /v1/archive_policy_rule
      method: POST
      request_headers:
          content-type: application/json
          x-roles: admin
      data:
          whaa: foobar
      status: 400
      response_strings:
          - "Invalid input: extra keys not allowed"

# get an archive policy rules

    - name: get archive policy rule
      url: /v1/archive_policy_rule
      status: 200
      response_json_paths:
        $.[0].metric_pattern: disk.foo.*
        $.[1].metric_pattern: disk.*
        $.[2].metric_pattern: "*"

    - name: get unknown archive policy rule
      url: /v1/archive_policy_rule/foo
      status: 404

    - name: delete used archive policy
      url: /v1/archive_policy/low
      request_headers:
          x-roles: admin
      method: DELETE
      status: 400

# delete rule as non admin

    - name: delete archive policy rule non admin
      url: /v1/archive_policy_rule/test_rule1
      method: DELETE
      status: 403

# delete rule

    - name: delete archive policy rule1
      url: /v1/archive_policy_rule/test_rule1
      method: DELETE
      request_headers:
          x-roles: admin
      status: 204

    - name: delete archive policy rule2
      url: /v1/archive_policy_rule/test_rule2
      method: DELETE
      request_headers:
          x-roles: admin
      status: 204


    - name: delete archive policy rule3
      url: /v1/archive_policy_rule/test_rule3
      method: DELETE
      request_headers:
          x-roles: admin
      status: 204

# delete again

    - name: confirm delete archive policy rule
      url: /v1/archive_policy_rule/test_rule1
      method: DELETE
      request_headers:
        x-roles: admin
      status: 404

    - name: delete missing archive policy rule utf8
      url: /v1/archive_policy_rule/%E2%9C%94%C3%A9%C3%B1%E2%98%83
      method: DELETE
      request_headers:
        x-roles: admin
      status: 404
      response_strings:
          - Archive policy rule ✔éñ☃ does not exist

